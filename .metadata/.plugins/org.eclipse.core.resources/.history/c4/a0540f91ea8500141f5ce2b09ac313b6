import java.awt.Color;
 
public class Test {
    private int pixel = 1; // Variabel för upplösningen.
    private int MAX_ITER = 200;
    private int count = 0;
 
    public void render(MandelbrotGUI gui) {
        gui.disableInput(); // Förhindra avbrott från användaren.
 
        // Skapa matrisen för de komplexa talen.
        Complex[][] complex = mesh(gui.getMinimumReal(), gui.getMaximumReal(),
                gui.getMinimumImag(), gui.getMaximumImag(), gui.getWidth(),
                gui.getHeight()); 
 
        Color[] colorScale = new Color[MAX_ITER + 1];
         
        // Beräknar färgen för varje iteration
        for (int i = 0; i < MAX_ITER; i++) {
            colorScale[i] = new Color(i+1,i, i + 50); 
                                                         
 
        }
 
        switch (gui.getResolution()) {
        // Switch-case sats för Zoom.
        case MandelbrotGUI.RESOLUTION_VERY_HIGH:
            pixel = 1;
            break;
        case MandelbrotGUI.RESOLUTION_HIGH:
            pixel = 3;
            break;
        case MandelbrotGUI.RESOLUTION_MEDIUM:
            pixel = 5;
            break;
        case MandelbrotGUI.RESOLUTION_LOW:
            pixel = 7;
            break;
        case MandelbrotGUI.RESOLUTION_VERY_LOW:
            pixel = 9;
            break;
        }
 
         
        //Ritar Bildmatrisen i den upplösningen du valde genom att dividera med pixel.
        Color[][] picture = new Color[gui.getHeight() / pixel][gui.getWidth()/ pixel]; 
         
        for (int i = 0; i < complex.length / pixel; i++) {
            for (int j = 0; j < complex[i].length / pixel; j++) {
                Complex c = complex[i * pixel + pixel / 2][j * pixel + pixel / 2];
                Complex z = new Complex(0, 0);
 
                while (count < MAX_ITER && z.getAbs2() <= 4) {
                    z.mul(z);
                    z.add(c);
                    count++;
                }
 
                //färger eller svartvitt.
                switch (gui.getMode()) {
                case MandelbrotGUI.MODE_COLOR:
                    if (count < MAX_ITER) {
                        picture[i][j] = colorScale[count];
                    } else {
                        picture[i][j] = Color.YELLOW;
                    }
                    break;
                case MandelbrotGUI.MODE_BW:
                    if (z.getAbs2() <= 4) {
                        picture[i][j] = Color.BLACK;
                    } else {
                        picture[i][j] = Color.WHITE;
                    }
                }
                count = 0;
            }
        }
        // Rita upp bilden och ge användaren åter kontroll över programmet.
         gui.putData(picture, pixel, pixel);
        gui.enableInput();}
         
     
    private Complex[][] mesh(double minRe, double maxRe, double minIm,
            double maxIm, int width, int height) {
         
        // Generera komplexa tal till matrisen.
        Complex[][] complex = new Complex[height][width];
 
        for (int i = 0; i < complex.length; i++) {
            for (int j = 0; j < complex[i].length; j++) {
                double x = minRe + (-minRe + maxRe) / (width - 1) * j;
                double y = maxIm - (-minIm + maxIm) / (height - 1) * i;
                complex[i][j] = new Complex(x, y);
            }
        }
        return complex;
    }
}
         
 
 
/* Om vi vill rita en cirkel
          for (int i = 0; i < complex.length / pixel; i++) { // Bestäm färg på
                                                            // pixeln på plats
                                                            // [i][j] i
                                                            // bildmatrisen.
            for (int j = 0; j < complex[i].length / pixel; j++) {
 
                double re = complex[i * pixel + pixel / 2][j + pixel / 2]
                        .getRe();
                double im = complex[i * pixel + pixel / 2][j + pixel / 2]
                        .getIm();
                double abs = complex[i * pixel + pixel / 2][j + pixel / 2]
                        .getAbs2();
 
                if (abs > 1) {
                    picture[i][j] = Color.WHITE;
                } else {
                    if (im > 0 && re > 0) {
                        picture[i][j] = Color.RED;
                    } else if (im > 0 && re < 0) {
                        picture[i][j] = Color.BLUE;
 
                    } else if (im < 0 && re < 0) {
                        picture[i][j] = Color.GREEN;
                    } else if (im < 0 && re > 0) {
                        picture[i][j] = Color.BLACK;
                    }
                }
            }
 
             
        }*/
         
         
         
         
         