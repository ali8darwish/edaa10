import java.awt.Color;

public class Generator {
	/** Ritar en bild i fönstret i användargränssnittet gui */
	public void render(MandelbrotGUI gui) {
		gui.disableInput(); // Gör att knapparna i
							// användargränssnittet inte reagerar på tryck och
							// att beräkningarna inte störs av att användaren
							// gör operationer i fönstret.
		int width = gui.getWidth();
		int height = gui.getHeight();
		
		Complex[][] mesh = mesh(gui.getMinimumReal(), gui.getMaximumReal(),
				gui.getMinimumImag(), gui.getMaximumImag(), width, height);
		// Anropar mesh för att skapa matrisen med komplexatal.
		
		Color[][] picture = new Color[Math.round((float) height / pixelSize)][Math
				.round((float) width / pixelSize)];
		// Skapar matrisen som innehåller bildpunkterna som ska ritas.
		
		for (int i = 0; i < picture.length; i++) {
			for (int k = 0; k < picture[0].length; k++) {
				Complex c = mesh[pixelSize / 2 + i * pixelSize][pixelSize / 2
						+ k * pixelSize];
				Color p;
				if (c.getAbs2() > 1) {
					p = Color.WHITE;
				} else {
					if (c.getRe() >= 0 && c.getIm() >= 0) {
						p = Color.CYAN;
					} else if (c.getRe() < 0 && c.getIm() >= 0) {
						p = Color.MAGENTA;
					} else if (c.getRe() < 0 && c.getIm() < 0) {
						p = Color.YELLOW;
					} else {
						p = Color.BLACK;
					}
				}
				picture[i][k] = p;
			}
		}
		gui.putData(picture, pixelSize, pixelSize);
	}

	/**
	 * Skapar en matris där varje element är ett komplext tal som har rätt
	 * koordinater
	 */
	private Complex[][] mesh(double minRe, double maxRe, double minIm,
			double maxIm, int width, int height) {
		Complex[][] complex = new Complex[height][width];
		for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
		complex[i][k] = new Complex(<re>, <im>);
		}

	}
}
}